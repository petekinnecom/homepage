"use strict";

var EventEmitter = require('events').EventEmitter;

var states = [
  'confirmed', // The user has taken an action confirming that they are using a mobile device
  'likely', // The user has not taken an action to confirm, but our detector says that they are on mobile
  'unlikely', // The user has not taken an action to confirm, but our detector says that they are not on mobile
  'denied', // The user has taken an action confirming that they are not using a mobile device
];

function Model(mobileDetected){
  this.events = new EventEmitter();
  if (mobileDetected){
    this.setState('likely');
  }
  else {
    this.setState('unlikely');
  }

  var self = this;
  states.forEach(function(state){
    // e.g. 'confirmed' => 'isConfirmed'

    var name = "is" + state[0].toUpperCase() + state.substr(1);

    self[name] = function(){
      return this.state === state;
    };
  });
}

Model.prototype.setState = function(state){
  if (states.indexOf(state) === -1){
    throw Error("Invalid mobile detection state");
  }

  this.state = state;
  this.events.emit('stateChanged', this.state, this.isMobile());
};

Model.prototype.getState = function(){
  return this.state;
};

// Other objects may need to know whether to act as mobile
// or not. This represents our best guess. Objects needing
// more granularity can ask for the state directly.
Model.prototype.isMobile = function(){
  return (states.indexOf(this.state) < 2);
};

module.exports = Model;
