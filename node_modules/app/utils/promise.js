function Promise(){
  this.successFunctions = [];
  this.failureFunctions = [];
}

Promise.prototype.then = function(fn){
  this.successFunctions.push(fn); 
  return this;
};

Promise.prototype.fail = function(fn){
  this.failureFunctions.push(fn);
  return this;
};

Promise.prototype.resolve = function(args){
  runAll.call(this, this.successFunctions, args);
};

Promise.prototype.reject = function(args){
  runAll.call(this, this.failureFunctions, args);
};

//private must be bound

var runAll = function(fns, args){

  fns.forEach(function(fn){
    fn(args);
  });

  this.successFunctions = this.failureFunctions = [];
};

module.exports = {
  create: function(){ return new Promise(); }
};
