"use strict";
var terminal = require('app/terminal/model');
var pagesData = require('app/pages/cache_machine/pages_data');
var $ = require('jquery');

var pagesGroupedByFolder = function(){
  var unique = function(el,i,a){
    if (i == a.indexOf(el)){
      return true;
    }
    else {
      return false;
    }
  };

  var folders = pagesData.map(function(page){
    return page.folder;
  }).sort().filter(unique);

  var nodes = {};
  folders.forEach(function(folder){
    nodes[folder] = pagesData.filter(function(page){
      return page.folder == folder;
    });
  });

  return nodes;
};

var getCurrentPage = function(){
  var currentPage = null;

  pagesData.forEach(function(page){
    if (window.location.pathname === page.path.replace(/\/chunks/, '')){
      currentPage = page;
    }
  });

  if (!currentPage){
    throw new Error("could not identify current page");
  }

  return currentPage;
};


function Model(){

  var showTree = function(match){
    var folderToExpand = match[1] || getCurrentPage().folder;
    terminal.clear();

    var nodes = pagesGroupedByFolder();

    //kinnecom: change color of folders to something interesting.
    Object.keys(nodes).forEach(function(folder){
      if (folderToExpand == folder) {
        terminal.log('<a href="#" data-input="nav '+ folder + '" class="terminal-folder--active">' + '&#9660; ' + folder + ":</a>", {enqueue: false});
        nodes[folder].forEach(function(page){
          if (page == getCurrentPage()){
            terminal.log("&nbsp;&nbsp;- " + page.name, {enqueue: false});
          }
          else {
            terminal.log("&nbsp;&nbsp;- " + page.name, {data: {input: "page " + page.name}, enqueue: false});
          }

        });
      }
      else {
        terminal.log('<a href="#" data-input="nav ' + folder + '" class="terminal-folder">&#9654; ' + folder + '</a>', {enqueue: false});
      }
    });
  };

  terminal.registerCommand({
    matcher: /^nav\s*(.*)$/,
    fn: showTree,
  });

}

module.exports = Model;
