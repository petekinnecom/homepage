var Processor = require('app/terminal2/processor');
var Prompt = require('app/terminal2/input/prompt/model');

//CAN'T use terminal here, since we are initializing this
// object WHILE creating the terminal singleton!
//var terminal = require('app/terminal2/model');


function Model(){
  this.prompt = new Prompt();

  this.defaultProcessor = new Processor();
  this.currentProcessor = this.defaultProcessor;
}

Model.prototype.setChars = function(chars){
  this.prompt.setChars(chars);
};

Model.prototype.addChar = function(char){
  this.prompt.addChar(char);
};

Model.prototype.special = function(specialChar){
  this.prompt[specialChar]();
};

Model.prototype.interrupt = function(){
  this.currentProcessor = this.defaultProcessor;
};

Model.prototype.run = function(){
  var terminal = require('app/terminal2/model');

  var inputString = this.prompt.getString();

  var options = {
    enqueue: false,
    data: { promptName: this.currentProcessor.name}
  };

  terminal.in(inputString, options);

  try {
    process.call(this, inputString);
  }
  catch(e) {
    terminal.warn(e.message);
    endProcess.call(this);
  }
};

// private, must be bound

// A Processor must return another Processor or
// a falsey value.  False indicates that the processor
// has terminated.  There is no stack, so a Processor
// cannot have a subProcessor.

var process = function(input) {
  //this.prompt.processStarted();

  this.currentProcessor = this.currentProcessor.process(input) || this.defaultProcessor;
  //endProcess.call(this);
};

var endProcess = function(){

  //var endEvent = function(){
  //  this.events.emit('processEnded', this.currentProcessor.name);
  //};

  //TODO: this is used to tell the view to
  // show the correct caret again.
  // I think I should tell the charview to enable
  // itself...or something.
  // should send it a promise?
  //this.queue.push(endEvent.bind(this));
};
module.exports = Model;
