function Parser(type, resources){
  
  this.resources = resources;

  if (type === 'local'){
    //this.root = 'http://localhost:9080/#';
    this.root = new RegExp('^.*#');
  }
  else if (type === 'prod'){
    this.root = 'http://www.petekinne.com/#';
  }
  else {
    throw Error('unsupported path type');
  }
}

Parser.prototype.parse = function(url){
  var path = url.replace(this.root, '');

  // use a 'for' loop, so that we can just
  // return the first match.  Otherwise, we 
  // need to map, then filter. 

  for (var i=0; i < this.resources.length; i++){
    var resource, regex, match;

    resource = this.resources[i];
    regex = new RegExp('^' + resource + '/(.*)'); 
    match = path.match(regex);

    if (match) {
      return {
        name: resource,
        id: match[1],
      };
    }
  }

  throw Error('path parse error: resource not found');

};

Parser.prototype.construct = function(resource){
  return '#' + resource.controller + '/' + resource.id;
};

module.exports = Parser;
