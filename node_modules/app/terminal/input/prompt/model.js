var EventEmitter = require('events').EventEmitter;
var History = require('app/terminal/input/prompt/history');

function Model(){
  this.events = new EventEmitter();
  this.chars = [];
  this.caret = 0;

  this.history = new History([]);
}

Model.prototype.setChars = function(string){
  this.chars = string.split('');
  this.caret = this.chars.length;

  changed.call(this);
};

Model.prototype.addChar = function(newChar){
  var before, after;

  before = cloneChars.call(this);
  after = before.splice(this.caret);

  this.chars = before.concat(newChar).concat(after);
  this.caret += 1;

  changed.call(this);
};

Model.prototype.backspace = function(){
  if (this.caret > 0) {
    this.chars.splice(this.caret - 1, 1); 
    this.caret -= 1;
  }

  changed.call(this);
};

Model.prototype.left_arrow = function(){
  if (this.caret > 0) {
    this.caret -= 1;
  }

  changed.call(this);
};

Model.prototype.right_arrow = function(){
  if (this.caret < this.chars.length) {
    this.caret += 1;
  }

  changed.call(this);
};

Model.prototype.delete = function(){
  if (this.caret < this.chars.length){
    this.chars.splice(this.caret, 1); 
  }

  changed.call(this);
};

Model.prototype.up_arrow = function(){
  resetTo.call(this, this.history.back());
  changed.call(this);
};

Model.prototype.down_arrow = function(){
  resetTo.call(this, this.history.forward());

  changed.call(this);
};

Model.prototype.enter = function(){
  var text = this.chars.join('');
  this.caret = 0;
  this.chars = [];

  this.history.push(text);
  this.events.emit('run', text);

  changed.call(this);
};

Model.prototype.getString = function(){
  return this.chars.join('');
};

//private, must be bound

var resetTo = function(string){
  this.chars = string.split("");
  this.caret = this.chars.length;
};
var cloneChars = function() {
  return this.chars.slice(0);
};

var changed = function(){
  this.events.emit('changed', getState.call(this));
};

var getState = function(){
  var pre, under, post, tmpChars;

  tmpChars =  cloneChars.call(this);

  under = tmpChars[this.caret];
  post = tmpChars.slice(this.caret + 1).join('');
  tmpChars.splice(this.caret);
  pre = tmpChars.join('');

  return {
    pre: pre,
    under: under,
    post: post,
  };
};

module.exports = Model;
