function History(commands){
  this.commands = commands;
  resetPointer.call(this);
}

History.prototype.back = function(){
  this.pointer = Math.max(this.pointer - 1, 0);
  return getCommand.call(this);
};

History.prototype.forward = function(){
  this.pointer = Math.min(this.pointer + 1, this.commands.length);
  return getCommand.call(this);
};

History.prototype.push = function(command){
  this.commands.push(command);
  resetPointer.call(this);
};

//private, must be bound

var resetPointer = function(){
  this.pointer = this.commands.length;
};

var getCommand = function(){
  var trueCommands = this.commands.concat(''); //the last entry should be the empty entry
  return trueCommands[this.pointer];
};
module.exports = History;
