var terminal = require('app/terminal/model');
var $ = require('jquery');
var EventEmitter = require('events').EventEmitter;
var CharView = require('app/terminal/input/char_view');
var SpecialChars = require('app/terminal/input/special_chars');

function View($el, $hidden){
  this.$el = $el;
  this.enabled = true;
  this.events = new EventEmitter();

  this.charView = new CharView();

  this.charView.events.on('run', run.bind(this));

  this.$el.on('focus', focus.bind(this));

  terminal.events.on('setInput', this.set.bind(this));
  terminal.events.on('processStarted', hide.bind(this));
  terminal.events.on('processEnded', show.bind(this));

  render.call(this);
}

View.prototype.set = function(text){
};

View.prototype.add = function(text){
};

View.prototype.terminalResized = function(newState){
  if (newState === 'minimized'){
    this.$el[0].scrollIntoView();
  }
};

//NEW

View.prototype.keydown = function(event){

  var specialChar = SpecialChars.getSpecial(event.keyCode);

  if (specialChar){
    event.preventDefault();
    this.charView[specialChar]();
    render.call(this);
  }
};

View.prototype.keypress = function(event){
  event.preventDefault();

  if (SpecialChars.getSpecial(event.keyCode)) {
    return;
  }
  var typedChar = String.fromCharCode(event.charCode);

  this.charView.type(typedChar);

  render.call(this);
};


//private, must be bound

var focus = function(event) {
  event.preventDefault();
  //this.events.emit('focus');
};

var blur = function(event) {
  //this.events.emit('blur');
};

var render = function(pre, under, post){
  var html = this.charView.render();
  this.$el.html(html);
};

var hide = function(){
  this.$el.hide();
  this.enabled = false;
};

var show = function(promptName){
  this.$el.attr('data-prompt-name', promptName);
  this.$el.show();
  this.$el[0].scrollIntoView();
  this.$el.focus();
  this.enabled = true;
};

var run = function(text){
  if (this.enabled){
    terminal.input(text);
  }
};

module.exports = View;
