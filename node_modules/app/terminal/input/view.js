var terminal = require('app/terminal/model');
var $ = require('jquery');
var EventEmitter = require('events').EventEmitter;
var CharView = require('app/terminal/input/prompt/model');
var SpecialChars = require('app/terminal/input/prompt/special_chars');

function View($el, $hidden){
  this.$el = $el;
  this.enabled = true;
  this.events = new EventEmitter();

  this.charView = new CharView();

  this.charView.events.on('run', run.bind(this));

  this.$el.on('focus', focus.bind(this));

  terminal.events.on('setInput', this.set.bind(this));
  terminal.events.on('run', run.bind(this));
  terminal.events.on('processStarted', hide.bind(this));
  terminal.events.on('processEnded', show.bind(this));

  render.call(this);
}

View.prototype.set = function(string){
  //This should be delegated to the charView.
  //SO: we can expose terminal.set, which delegates here, which
  //delegates to the CharView.

  //Should refactor the model view controller, since the concerns are getting
  //confused...

  //maybe the terminal controller should be the singleton ?
};

View.prototype.terminalResized = function(newState){
  if (newState === 'minimized'){
    this.$el[0].scrollIntoView();
  }
};

//private, must be bound

var hide = function(){
  this.$el.hide();
  this.enabled = false;
};

var show = function(promptName){
  this.$el.attr('data-prompt-name', promptName);
  this.$el.show();
  this.$el[0].scrollIntoView();
  this.$el.focus();
  this.enabled = true;
};

var run = function(text){
  var cmd = text || this.$el.text();
  if (this.enabled){
    terminal.input(cmd);
  }
};

module.exports = View;
