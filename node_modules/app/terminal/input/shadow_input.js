var EventEmitter = require('events').EventEmitter;
var regexEscape = require('app/utils/regex_escape');

var ENTER_KEY = 13;

function ShadowInput($el){
  this.$el = $el;
  this.events = new EventEmitter();

  this.$el.on('keyup', keyup.bind(this));
  this.$el.on('keydown', updateCaret.bind(this));
  this.$el.on('blur', this.events.emit.bind(this.events, 'blur'));
}

ShadowInput.prototype.placeCaretAtEnd = function() {
  var el = this.$el[0];
  if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
    var range = document.createRange();
    range.selectNodeContents(el);
    range.collapse(false);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  }
  else if (typeof document.body.createTextRange != "undefined") {
    var textRange = document.body.createTextRange();
    textRange.moveToElementText(el);
    textRange.collapse(false);
    textRange.select();
  }

  updateCaret.call(this);
};

ShadowInput.prototype.focus = function() {
  this.$el.focus();
  this.placeCaretAtEnd();
};

var keyup = function(event){
  if (event.keyCode === ENTER_KEY) {
    event.preventDefault();

    terminal.input(this.$el.text());
    this.$el.text('');
  }

  updateCaret.call(this);
};


var updateCaret = function() {
  var preCaret, underCaret, postCaret,
  regex, match, currentText, newText;

  preCaret = getStringBeforeCaret.call(this);
  regex = new RegExp('^' + regexEscape(preCaret) + '(.)?(.*)');
  currentText = this.$el.text();
  match = currentText.match(regex);

  if (!match) { throw { message: "can't find preCaret string :(" }; }

  underCaret = match[1];
  postCaret = match[2] || '';

  this.events.emit('caretChanged', preCaret, underCaret, postCaret);
};

var getStringBeforeCaret = function(){
  var selection, range, el;
  el = this.$el[0];
  selection = window.getSelection();
  if (selection.rangeCount > 0) {
      range = selection.getRangeAt(0).cloneRange();
      range.collapse(true);
      range.setStart(el, 0);
      return range.toString();
  }

  console.log("must be a special key");

  throw {
    message: "must be a special key"
  };
};
module.exports = ShadowInput;
