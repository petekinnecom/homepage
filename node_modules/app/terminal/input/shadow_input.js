var EventEmitter = require('events').EventEmitter;
var regexEscape = require('app/utils/regex_escape');

var CaretUtils = require('app/terminal/input/caret');

var ENTER_KEY = 13;

function ShadowInput($el){
  this.$el = $el;
  this.events = new EventEmitter();

  this.$el.on('keyup', keyup.bind(this));
  this.$el.on('keydown', update.bind(this));
  this.$el.on('blur', this.placeCaretAtEnd.bind(this));

  terminal.events.on('run', run.bind(this));
}

ShadowInput.prototype.placeCaretAtEnd = function() {
  CaretUtils.moveToEnd(this.$el[0]);
  update.call(this);
};

ShadowInput.prototype.focus = function() {
  this.$el.focus();
  this.placeCaretAtEnd();
};

ShadowInput.prototype.set = function(text) {
  this.$el.text(text);
  this.placeCaretAtEnd();
};

ShadowInput.prototype.add = function(char) {
  var current = this.$el.text();
  this.set(current + text);
};

var keyup = function(event){
  if (event.keyCode === ENTER_KEY) {
    event.preventDefault();
    run.call(this);
  }

  update.call(this);
};

var run = function(){
  terminal.input(this.$el.text());
  this.$el.text('');
  update.call(this);
};

var update = function() {
  var preCaret, underCaret, postCaret,
  regex, match, currentText, newText;

  currentText = this.$el.text();

  preCaret = CaretUtils.getStringBefore(this.$el[0]);
  regex = new RegExp('^' + regexEscape(preCaret) + '(.)?(.*)');

  match = currentText.match(regex);

  if (!match) { throw { message: "can't find preCaret string :(" }; }

  underCaret = match[1];
  postCaret = match[2] || '';

  this.events.emit('changed', preCaret, underCaret, postCaret);
};

module.exports = ShadowInput;
