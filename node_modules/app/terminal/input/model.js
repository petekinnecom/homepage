var Processor = require('app/terminal/processor');
var Prompt = require('app/terminal/input/prompt/model');
var EventEmitter = require('events').EventEmitter;

//CAN'T use terminal here, since we are initializing this
// object WHILE creating the terminal singleton!
//var terminal = require('app/terminal/model');


function Model(){
  this.prompt = new Prompt();
  this.events = new EventEmitter();

  this.defaultProcessor = new Processor();
  this.currentProcessor = this.defaultProcessor;

  this.prompt.events.on('run', this.run.bind(this));
}

Model.prototype.setChars = function(chars){
  this.prompt.setChars(chars);
};

Model.prototype.addChar = function(char){
  this.prompt.addChar(char);
};

Model.prototype.special = function(specialChar){
  this.prompt[specialChar]();
};

Model.prototype.interrupt = function(){
  this.currentProcessor = this.defaultProcessor;
};

Model.prototype.run = function(inputString){
  var terminal = require('app/terminal/model');

  var options = {
    enqueue: false,
    data: { promptName: this.currentProcessor.name}
  };

  terminal.in(inputString, options);

  try {
    process.call(this, inputString);
  }
  catch(e) {
    terminal.warn(e.message);
    endProcess.call(this);
  }
};

Model.prototype.getPromptName = function(){
  return this.currentProcessor.name;
};
// private, must be bound

// A Processor must return another Processor or
// a falsey value.  False indicates that the processor
// has terminated.  There is no stack, so a Processor
// cannot have a subProcessor.

var process = function(input) {
  this.events.emit('disabled');

  var calledClose = false;
  var self = this;

  var close = function(){
    terminal.output.enqueue(
      endProcess.bind(self)
    );
    calledClose = true;
  };

  this.currentProcessor = this.currentProcessor.process(input, close) || this.defaultProcessor;

  if (! calledClose){
    console.log("The process did not call close()");
    throw {
      message: "The process did not call close()"
    };
  }
};

var endProcess = function(){
  this.events.emit('enabled');
};

module.exports = Model;
