var Deferred = require('jquery').Deferred;

//options:
//  matcher:
//    RegExp or function: returns a truthy/falsey value
//    indicating whether this command handles the given input
//  fn:
//    function: To be run if the command handles the input.
//
//    Returns a truthy value if the command is asynchronous.
//    An asynchronous command must resolve the promise itself.
//
//    A falsey value indicates that the command is finished,
//    and we automatically resolve the promise.


function Command(options){
  this.matcher = options.matcher;
  this.fn = options.fn;
}

Command.prototype.isHandler = function(input){
  return !!matchOn.call(this, input);
};

Command.prototype.run = function(input) {
  var match, deferred, isAsync;
  deferred = new Deferred();

  match = matchOn.call(this, input);
  isAsync = this.fn(match, deferred);

  if (! isAsync){
    // if the promise is already resolved,
    // then this is a no-op
    deferred.resolve(false);
  }

  return deferred.promise();
};

//private, must be bound

var matchOn = function(input){
  if (this.matcher instanceof RegExp) {
    return input.match(this.matcher);
  }
  else {
    return this.matcher(input);
  }

};

module.exports = Command;
