'use strict';

var WorkQueue = require('app/utils/work_queue');
var EventEmitter = require('events').EventEmitter;

function Model(isOpen){
  this.workQueue = new WorkQueue(getDelay.bind(this, isOpen));
  this.lines = [];
  this.events = new EventEmitter();

  this.win = add.bind(this, 'win');
  this.log = add.bind(this, 'log');
  this.warn = add.bind(this, 'warn');
  this.input = add.bind(this, 'input');
}

Model.prototype.enqueue = function(fn){
  this.workQueue.push(fn);
};

//private, must be bound

//
//options:
//  enqueue: boolean
//  data: options for display
//
var add = function(type, text, options) {
  options = (options || {});

  var line = {
    type: type,
    text: text,
    data: options && options.data
  };

  var displayLine = function(){
    this.lines.push(line);
    this.events.emit('lineAdded', line);
  };

  if (options.enqueue === false){
    displayLine.call(this);
  }
  else {
    this.workQueue.push(displayLine.bind(this));
  }
};

var getDelay = function(isOpen){
  if (isOpen()){
    return 200;
  }
  else {
    return 800;
  }
};

module.exports = Model;
