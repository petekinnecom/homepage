EventEmitter = require('events').EventEmitter;
Processor = require('app/terminal/processor');

function Model(){
  this.events = new EventEmitter();
  this.lines = [];

  this.win = add.bind(this, 'win');
  this.log = add.bind(this, 'log');
  this.warn = add.bind(this, 'warn');

  this.defaultProcess = new Processor().process;
}

Model.prototype.input = function(input) {
  add.call(this, 'input', input);

  try {
    process.call(this, input);
  }
  catch(e) {
    this.warn(e.message);
  }
};

Model.prototype.setInput = function(input) {
  this.events.emit('setInput', input);
};

Model.prototype.run = function(){
  this.events.emit('run');
};

Model.prototype.interrupt = function(){
  this.currentProcess = null;
};

//private, must be bound

var add = function(type, text) {
  var line = {
    type: type,
    text: text,
  };

  this.lines.push(line);
  this.events.emit('lineAdded', line);
};

var process = function(input) {
  if (this.currentProcess){
    this.currentProcess(input);
  }
  else {
    this.currentProcess = this.defaultProcess(input);
  }
};

// singleton, because it will be easier
// than trying to pass the context around
// through asyncronous event handlers (e.g.,
// on url change...)

module.exports = new Model();
