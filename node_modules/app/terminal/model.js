var EventEmitter = require('events').EventEmitter;
var TerminalInput = require('app/terminal/input/model');
var TerminalOutput = require('app/terminal/output/model');
var Typer = require('app/terminal/typer');

//states:
//  closed
//  open

function Model(){
  this.events = new EventEmitter();
  this.output = new TerminalOutput(isOpen.bind(this));
  this.input = new TerminalInput(this.output);
  this.state = 'closed';

  //delegations
  this.registerCommand = this.input.registerCommand.bind(this.input);

  this.type = function(string, options){
    options = options || {};
    options.delay = options.delay || 50;

    return Typer.type(this, string, options);
  };
}

//INPUT ACTIONS

Model.prototype.setChars = function(string) {
  this.input.setChars(string);
};

Model.prototype.addChar = function(char){
  this.input.addChar(char);
};

Model.prototype.run = function(){
  this.input.prompt.enter();
};

Model.prototype.runInput = function(string) {
  this.input.setChars(string);
  this.input.run();
};

Model.prototype.interrupt = function(){
  this.input.interrupt();
};

//OUTPUT ACTIONS

Model.prototype.warn = function(){
  return this.output.warn.apply(this.output, arguments);
};

Model.prototype.log = function(){
  return this.output.log.apply(this.output, arguments);
};

Model.prototype.win = function(){
  return this.output.win.apply(this.output, arguments);
};

Model.prototype.in = function(){
  return this.output.in.apply(this.output, arguments);
};

Model.prototype.clear = function(){
  return this.output.clear();
};

//WINDOW ACTIONS

Model.prototype.close = function(){
  setState.call(this, 'closed');
};

Model.prototype.isOpen = function(){
  return isOpen.call(this); 
};

Model.prototype.open = function(){
  setState.call(this, 'open');
};

Model.prototype.toggleSize = function(){
  if (this.state === 'open'){
    this.close();
  }
  else {
    this.open();
  }
};

//private, must be bound

var setState = function(newState){
  if (newState === this.state){
    return;
  }

  this.state = newState;
  this.events.emit('stateChanged');
};

var isOpen = function(){
  return this.state == 'open';
};

// singleton, because it will be easier
// than trying to pass the context around
// through asyncronous event handlers (e.g.,
// on url change...)

module.exports = new Model();
