EventEmitter = require('events').EventEmitter;
Processor = require('app/terminal/processor');
Queue = require('app/utils/work_queue');

function Model(){
  this.events = new EventEmitter();
  this.queue = new Queue(500);
  this.lines = [];

  this.win = add.bind(this, 'win');
  this.log = add.bind(this, 'log');
  this.warn = add.bind(this, 'warn');

  this.defaultProcess = new Processor().process;
}

Model.prototype.input = function(input) {
  add.call(this, 'input', input, {enqueue: false});

  try {
    process.call(this, input);
  }
  catch(e) {
    this.warn(e.message);
    this.queue.push(this.events.emit.bind(this.events, 'processEnded'));
  }
};

Model.prototype.setInput = function(input) {
  this.events.emit('setInput', input);
};

Model.prototype.run = function(){
  this.events.emit('run');
};

Model.prototype.interrupt = function(){
  this.currentProcess = null;
};

//private, must be bound

var add = function(type, text, options) {
  //options: enqueue: boolean

  var line = {
    type: type,
    text: text,
  };

  var displayLine = function(){
    this.lines.push(line);
    this.events.emit('lineAdded', line);
  };

  if (options && options.enqueue){
    this.queue.push(displayLine.bind(this));
  }
  else {
    displayLine.call(this);
  }
};

var process = function(input) {
  this.events.emit('processStarted');
  if (this.currentProcess){
    this.currentProcess(input);
  }
  else {
    this.currentProcess = this.defaultProcess(input);
  }
  this.queue.push(this.events.emit.bind(this.events, 'processEnded'));
};

// singleton, because it will be easier
// than trying to pass the context around
// through asyncronous event handlers (e.g.,
// on url change...)

module.exports = new Model();
